---

  ##
  ## besides other thinks this file handles creating the final complete 
  ## auto version and checks if that tag already exists or is new and 
  ## must be built
  ##


  - set_fact:
      _tmp_build_tags: []
      _tmp_idtag: "{{ _autovcfg_iter }}"
      _tmp_cur_autover:
         version_in: "{{ _autovcfg_iter }}"


    # TODO: optionally allow to disable default version tags ?? (only build idtags)
  - set_fact:
      _tmp_build_tags: "{{ _tmp_build_tags + [_autovcfg_iter] }}"


  - name: optionally append scm timestamp to idtag when avaible
    set_fact:
      _tmp_idtag: "{{ _tmp_idtag }}_{{ _tmp_scm_timestamp }}"
      _tmp_cur_autover: >-
         {{ _tmp_cur_autover | combine({'scm_ts': _tmp_scm_timestamp}) }}
    when: _tmp_scm_timestamp


    ## add scm suffixed idtag to tags to build
  - set_fact:
      _tmp_build_tags: "{{ _tmp_build_tags + [_tmp_idtag] }}"
    when: _tmp_idtag != _autovcfg_iter


  - name: decorate image with auto-version data
    set_fact:
      _cur_image_deco: >-
        {{ _cur_image_deco 
         | smabot.containers.add_deco(
             key='contimg_verin', value=_tmp_cur_autover.version_in, 
             add_env=['CONTIMG_VERSION_IN'],
             add_label=['org.opencontainers.image.version']
           )
         | smabot.containers.add_deco(
             key='contimg_idtag', value=_tmp_idtag, 
             add_env=['CONTIMG_IDTAG'],
             add_label=['contimage.self.idtag']
           )
        }}


  - name: >-
      check if computed id tag '{{ _tmp_idtag }}' for current 
      auto version '{{ _autovcfg_iter }}' exists 
      already  ==>>  {{ _dbimg_iter.value.fullname }}

    community.docker.docker_image:
      name: "{{ _dbimg_iter.value.fullname ~ ':' ~ _tmp_idtag }}"
      source: pull
    register: _tmp_pullres
    ignore_errors: yes


    ##
    ## note: _tmp_pullres.failed is expected to mean: idtag does
    ##   not exist yet, so obviously we want to add this auto 
    ##   version than to build queue and not otherwise, except 
    ##   user forced a rebuild
    ##
  - set_fact:
      _auto_versions: >-
         {{ _auto_versions 
          + [(_tmp_cur_autover | combine({
               'idtag': _tmp_idtag, 'tags': _tmp_build_tags
            }))]
         }}

    when: _tmp_pullres.failed or _docker_force_rebuild


  - debug:
      msg: Force rebuild of already existing auto version '{{ _tmp_idtag }}'
    when: not _tmp_pullres.failed and _docker_force_rebuild


  - block:

      - debug:
          msg: Skip already built auto version '{{ _tmp_idtag }}'


      - set_fact:
          _cur_image_meta: >-
            {{ _cur_image_meta 
             | combine({'skips': [{
                   'tag': _tags_iter,
                 }]}, recursive=True, list_merge='append'
               )
            }}

        loop: "{{ _tmp_build_tags }}"
        loop_control:
          loop_var: _tags_iter

        when: docker_build.meta.create

    when: not _tmp_pullres.failed and not _docker_force_rebuild

