---

  - set_fact:
       _auto_versions: [{'latest': True, 'idtag': ''}]
       _cur_dockimg: "{{ _dbimg_iter.value }}"
       _dcfg_keychain: "{{ [_dbimg_owner_iter.key, _dbimg_iter.key] }}"
       _cur_image_meta: {}
##       _cur_image_deco: "{{ _dbimg_iter.value.decorations }}"
##
##       _cur_image_labels: >-
##          {{ _dbimg_iter.value.docker_labels | default({}, True) }}
##
##       _cur_image_env: >-
##          {{ {} | smabot.containers.append_contenv(
##               new_vars=(_dbimg_iter.value.environment.static
##                 | default({}, True)
##               ) 
##             )
##           | smabot.containers.append_contenv(
##               new_vars=(_dbimg_iter.value.proxy.vars | default(None))
##             )
##          }}


    ##
    ## optionally handle auto versioning
    ##
  - block:

      - set_fact:
           _auto_versions: []
           _tmp_in_versions: []
           _tmp_scm_timestamp: ''


      - include_tasks: >-
          auto_versioning/methods/{{
            _cur_dockimg.auto_versioning.method_type }}.yml
        when: not _cur_dockimg.auto_versioning.fixed_only


      - block:

          - name: add fixed auto versions to list
            set_fact:
              _tmp_in_versions: >-
                 {{ _tmp_in_versions + _cur_dockimg.auto_versioning.fixed_versions }}


            ## note: dont do this when we have only fixed versions
          - name: resort combined version list
            set_fact:
              _tmp_in_versions: >-
                 {{ _tmp_in_versions
                  | smabot.base.sort_versions(reverse=True,
                       method=_cur_dockimg.auto_versioning.sorting.method_type,
                       method_args=_cur_dockimg.auto_versioning.sorting.method_args
                 }}
             when: not _cur_dockimg.auto_versioning.fixed_only

        when: >-
          _cur_dockimg.auto_versioning.get('fixed_versions', False)


      - ansible.builtin.assert:
          that:
            - _tmp_in_versions
          fail_msg: >-
            Auto-Versioning method of type
            {{ _cur_dockimg.auto_versioning.method_type }}
            failed to determine a single in-version.


        ##
        ## note: this expects auto-versioning methods to return
        ##   versions sorted from new to old
        ##
      - name: >-
          of all found potential auto versions take the last
          {{ dbimg_iter.value.auto_versioning.method_args.vercnt_max }}
        set_fact:
          _tmp_in_versions: >-
            {{ _tmp_in_versions[:_cur_dockimg.auto_versioning.method_args.vercnt_max] }}
        when: _cur_dockimg.auto_versioning.method_args.vercnt_max > 0


      - block:

           # TODO: support other scm types
           # TODO: support passing scm stuff from "outside"

          - debug:
              msg: Get timestamp from scm for auto version

          - include_tasks: auto_versioning/scm/git.yml
            when: _cur_dockimg.auto_versioning.scm_based.type == 'git'

          - ansible.builtin.assert:
              that:
                - _tmp_scm_timestamp
              fail_msg: >-
                Auto-Versioning failed to obtain the current scm
                timestamp from type
                '{{ _cur_dockimg.auto_versioning.scm_based.type }}'

        when: _cur_dockimg.auto_versioning.scm_based


      - include_tasks: auto_versioning/common_post.yml
        loop: "{{ _tmp_in_versions }}"
        loop_control:
          loop_var: _autovcfg_iter
          index_var: _autovcfg_index

    when: _cur_dockimg.get('auto_versioning', False)


  - name: remember original python interpreter
    set_fact:
      anspy_original: >-
        {{ ansible_python_interpreter }}


    ##
    ## prepare build container / ansible hosts for each version
    ##
  - include_tasks: prepare_contbuild_hosts.yml
    loop: "{{ _auto_versions }}"
    loop_control:
      loop_var: _autovcfg_iter


    ##
    ## do the image (for each auto version)
    ##
    ## switch ansible context into the docker builder container 
    ## by using the delegate mechanism (as using "hosts:" 
    ## only works for top level playbooks)
    ##
    ##  - include_tasks: build_image.yml
    ##    ##delegate_to: smabot_anscont_builders


  - name: record current image meta infos pre build (skips)
    set_fact:
      _docker_build_meta: >-
        {{ _docker_build_meta | combine(
            {'images': {_cur_dockimg.fullname: _cur_image_meta}},
            recursive=True, list_merge='append'
          )
        }}

    when: docker_build.meta.create

