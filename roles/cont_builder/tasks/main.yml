---

##
## the actual build steps inside the container to create,
## default context is execed into container to build
##

  - set_fact:
      _my_cfgref: "{{ hostvars.localhost._contbuild_hosts[ansible_host] }}"
      _bcon_name: "{{ ansible_host }}"
      smabot_containers_docker_builder_role_path: "{{ role_path }}"


  - set_fact:
      docker_build: "{{ _my_cfgref.docker_cfg  | smabot.base.deepcopy }}"
      _cur_dockimg: >-
        {{ _my_cfgref.docker_cfg.images
         | smabot.base.get_subdict(keychain=_my_cfgref.cfgkey)
        }}
      _autovcfg_iter: "{{ _my_cfgref.autover }}"


  - set_fact:
      _dbuild_meta: {}
      _java_proxy_env: {}
      _cur_image_meta: "{{ _my_cfgref.image_meta | smabot.base.deepcopy }}"
      _cur_image_deco: "{{ _cur_dockimg.decorations }}"

      _cur_image_labels: >-
         {{ _cur_dockimg.docker_labels | default({}, True) }}

      _cur_image_env: >-
         {{ {} | smabot.containers.append_contenv(
              new_vars=(_cur_dockimg.environment.static
                | default({}, True)
              ) 
            )
          | smabot.containers.append_contenv(
              new_vars=(_cur_dockimg.proxy.eco_systems.build_time.vars
                | default({}))
            )
         }}


  - name: decorate image with auto-version data
    set_fact:
      _cur_image_deco: >-
        {{ _cur_image_deco
         | smabot.containers.add_deco(
             key='contimg_verin', value=_autovcfg_iter.version_in,
             add_env=['CONTIMG_VERSION_IN'],
             add_label=['org.opencontainers.image.version']
           )
         | smabot.containers.add_deco(
             key='contimg_idtag', value=_autovcfg_iter.idtag,
             add_env=['CONTIMG_IDTAG'],
             add_label=['contimage.self.idtag']
           )
        }}
    when: _autovcfg_iter.get('version_in', False)


  - name: container build steps
    block:


    ##
    ## note: as we handle docker images / container as standard
    ##   ansible remote hosts, we need to have python installed there,
    ##   this means that any image build by this setup will contain a
    ##   python installation as we will keep it installed because it
    ##   is not unlikely that the user might want to install python
    ##   herself as part of her plan for the image and it would be
    ##   very hard to decide if python was only installed because
    ##   of ansible or because it really was requested by image setup
    ##
    ## if for a specific image the builder really, really dont want
    ## python in it we will provide a custom flag to set to force
    ## removing python again when building is through
    ##

      - name: bootstrap container system for ansible usage
        include_tasks: bootstrapping/main.yml


        ##
        ## note: standard facts gathering does not work because 
        ##   python is needed for it, luckily it can be called 
        ##   later explicitly like a normal module
        ##
      - name: gather facts for  ==>>  {{ _cur_dockimg.fullname }}
        ansible.builtin.setup:


        # also collect extended custom facts (e.g. java homes, pip's, ...)
      - include_role:
          name: smabot.base.extended_facts


## do steps prepackage
      - name: handle custom pre package install steps
        include_tasks: "{{ _cur_dockimg.steps.pre_packages }}"
        when: _cur_dockimg.get('steps', {}).get('pre_packages', None) is truthy


## do standard package install
      - name: standard distro package installs
        include_tasks: packages/distro/main.yml


# handle user accounts (and also groups, might depend on newly installed packages)
      - include_role:
          name: smabot.base.manage_os_users_and_groups
        vars:
          smabot_base_manage_os_users_and_groups_args: >-
            {{ _cur_dockimg.users._user_upstream_cfg }}
        when: >-
          _cur_dockimg.users._user_upstream_cfg | default(false)


## handle docker copy (might depend on newly created users)
      - include_role:
          name: smabot.containers.copy_to_image
        vars:
          copy_to_image_args:
            copy_cfg: "{{ _cur_dockimg.docker_copy }}"
            image_config: "{{ _cur_dockimg }}"


      - name: assure py pip is up to date  ==>>  {{ _cur_dockimg.fullname }}
        ansible.builtin.pip:
          name: pip
          state: latest


#
# do java proxy handling
#
# note: we do this after standard package install step, as it is 
#   absolutely possible, that java is not pre inherited from 
#   parent, but is installed during this building operation, so 
#   we prefer it atm to be handled after package install
#
#   -> the big caveat of this is obviously if java is already 
#     installed before hand somehow and proxying for it is 
#     necessary, we cannot use it before we come to this 
#     point (e.g. for custom pre install steps)
#

        # recollect extended facts, might have changed
        # siginificantly in the meantime (e.g. installed java package)
      - include_role:
          name: smabot.base.extended_facts


      - block:

          - name: add java proxy envvars when appropriate
            set_fact:
              _java_proxy_env: >-
                 {{ _cur_dockimg.proxy.eco_systems.java.envvars
                  | default({}) }}
              _cur_image_env: >-
                 {{ _cur_image_env | smabot.containers.append_contenv(
                      new_vars=(_cur_dockimg.proxy.eco_systems.java_buildtime.envvars
                        | default({})
                      ), strategy='combine'
                    )
                 }}

            ##
            ## do this either when config explicitly requested it, or 
            ## when auto dection is on and a java installation was 
            ## found in container system (which is expected to produce 
            ## some extended facts related to java)
            ##
            when: >-
              not _cur_dockimg.proxy.eco_systems.java.auto_detect
              or (_cur_dockimg.proxy.eco_systems.java.auto_detect
                  and ansible_facts.java is defined)


          - smabot.base.warn:
              msg: >-
                Configuration explicitly requested java proxy handling 
                but no java installation on container system could be found.

            when: >-
              not _cur_dockimg.proxy.eco_systems.java.auto_detect
              and ansible_facts.java is undefined

        when: _cur_dockimg.proxy.eco_systems.java.activate is truthy


## handle certificates

      - block:

          - name: handle extra ssl certificates
            include_role:
              name: smabot.base.handle_system_certs
            vars:
              handle_system_certs_args: >-
                {{ _cur_dockimg.ssl_certs | default({}, True) }}

            ##
            ## note: some ssl systems needs specific env vars set,
            ##   and it is totally possible we want to use them
            ##   for the rest of docker building
            ##
          - name: add certificate related envvars
            set_fact:
              _cur_image_env: >-
                 {{ _cur_image_env | smabot.containers.append_contenv(
                      new_vars=(handle_system_certs_result.envvars
                        | default({})
                      )
                    )
                 }}
            when: handle_system_certs_result.envvars is truthy

        when: _cur_dockimg.get('ssl-certs', {}).get('disable', False) is falsy


## handle special package managers

      - name: pip package installs  ==>>  {{ _cur_dockimg.fullname }}
        ansible.builtin.pip: "{{ _iter_packinst }}" 
        loop: >-
          {{ _cur_dockimg.packages.pip 
           | smabot.containers.to_psets(auto_version=_autovcfg_iter) }}
        loop_control:
          loop_var: _iter_packinst


      - name: handle optional pip requirements files  ==>>  {{ _cur_dockimg.fullname }}
        include_tasks: packages/pip/requirements.yml
        when: _cur_dockimg.packages.pip.requirements.sources


      - name: npm package installs  ==>>  {{ _cur_dockimg.fullname }}
        community.general.npm: "{{ _iter_packinst }}"
        loop: >-
          {{ _cur_dockimg.packages.npm
           | smabot.containers.to_psets(
              auto_version=_autovcfg_iter, grouped=False
           ) }}
        loop_control:
          loop_var: _iter_packinst


      - name: handle optional maven package / artifacts installs  ==>>  {{ _cur_dockimg.fullname }}
        include_tasks: packages/maven/main.yml
        loop: >-
          {{ _cur_dockimg.packages.maven
           | smabot.containers.to_psets(
              auto_version=_autovcfg_iter, grouped=False,
              pkg_convfn='maven'
           ) }}
        loop_control:
          loop_var: _iter_packinst


      - name: handle optional pysrc package installs  ==>>  {{ _cur_dockimg.fullname }}
        include_tasks: packages/pysrc/main.yml
        vars:
          psets_pysrc: >-
            {{ _cur_dockimg.packages.pysrc
             | smabot.containers.to_psets(
                  auto_version=_autovcfg_iter, grouped=False,
             ) }}
        when: _cur_dockimg.packages.pysrc.packages


## handle locales

      - block:

          - name: optionally handle locales
            include_role:
              name: smabot.base.handle_locales
            vars:
              smabot_base_handle_locales_args: >-
                {{ _cur_dockimg.locales }}

          - name: add locale envvars
            set_fact:
              _cur_image_env: >-
                 {{ _cur_image_env | smabot.containers.append_contenv(
                      new_vars=(smabot_base_handle_locales_result.envvars
                        | default(None)
                      ),
                    )
                 }}
            when: smabot_base_handle_locales_result.envvars is truthy

        when: _cur_dockimg.locales.enabled


## optionally handle "features"

      - name: optionally handle feature 'su-exec'
        include_tasks: features/su_exec/main.yml
        when: (_cur_dockimg.features.su_exec | default(False)) is truthy


      - name: optionally handle feature 'sudo'
        include_role:
          name: smabot.base.setup_sudo
        vars:
          smabot_base_setup_sudo_args: >-
            {{ _cur_dockimg.features.sudo }}
        when: _cur_dockimg.features.get('sudo', False)


      - block:

          - name: optionally handle feature 'sonar-scanner'
            include_role:
              name: smabot.base.setup_sonarqube_scanner
            vars:
              smabot_base_setup_sonarscan_args: >-
                {{ _cur_dockimg.features.sonarqube_scanner }}

          - name: add sonar scanner related envvars
            set_fact:
              _cur_image_env: >-
                 {{ _cur_image_env | smabot.containers.append_contenv(
                      new_vars=(smabot_base_setup_sonarscan_result.envvars
                        | default(None)
                      ),
                      syspath=(smabot_base_setup_sonarscan_result.syspath
                        | default(None)
                      ),
                    )
                 }}
            when: smabot_base_setup_sonarscan_result.envvars is truthy

        when: _cur_dockimg.features.get('sonarqube_scanner', False)


## do steps postpackage
      - name: handle custom post package install steps
        include_tasks: "{{ _cur_dockimg.steps.post_packages }}"
        when: _cur_dockimg.get('steps', {}).get('post_packages', None) is truthy


## do dynamic env


      - name: set container $USER envvar to configured docker_user  ==>>  {{ _cur_dockimg.fullname }}
        set_fact:
          _cur_image_env: >-
             {{ _cur_image_env | smabot.containers.append_contenv(
                  new_vars={'USER': _cur_dockimg.docker_user.real}
                )
             }}
        when: _cur_dockimg.docker_user.real | default(False)


      ##
      ## note: as always atm direct uppdating per ansfact return is broken, 
      ##   so we use here also a workaround role for now
      ##
       ## - name: determine final environment (vars) for image  ==>>  {{ _cur_dockimg.fullname }}
       ##   smabot.containers.compute_container_env:
       ##     config_ansvar: '_cur_dockimg'

      - include_role:
          name: smabot.containers.compute_container_env
        vars:
          compute_contenv_args:
            task_name: determine final environment (vars) for image  ==>>  {{ _cur_dockimg.fullname }}
            config_ansvar: _cur_dockimg
            modify_path: "{{ _cur_dockimg.sys_path }}"
            extra_envs:
              - "{{ _cur_image_env.vars }}"
              - "{{ _cur_dockimg.proxy.vars | default({}) }}"
              - "{{ _java_proxy_env }}"
              - "{{ _cur_image_deco | smabot.containers.deco_to_env }}"
            extra_syspath:
              - "{{ _cur_image_env.syspath }}"   ## | default({}, True) }}"
            duplicate_keys: 'overwrite'

      - debug:
          var: _cur_dockimg

## do dynamic labels

      - set_fact:
          _cur_image_labels: >-
            {{ _cur_image_labels 
             | combine((
                  _cur_image_deco | smabot.containers.deco_to_labels
               ))
            }}

## do final cleanup
      - include_tasks: final_cleanup/main.yml

## do final meta data collection
      - set_fact:
          _dbuild_meta: >-
            {{ _dbuild_meta | smabot.containers.combine_buildmeta(
                  metacfg=docker_build.meta, imgcfg=_cur_dockimg,
                  auto_versioning=_autovcfg_iter, ansible_facts=ansible_facts
               )
            }}
        when: docker_build.meta.create

       ##
       ## make at least part of final image environment also avaible 
       ## during build phase, this is important for stuff like proxies
       ##
       ## note: environment seems to use actually a direct reference 
       ##   of the passed dict (not a copy of it), which means if we 
       ##   update this dict later during build these envvars are 
       ##   immediately avaible for following module calls, which 
       ##   than means we dont need extra nested blocks every time 
       ##   we update environment variables
       ##
    environment: >-
      {{ _cur_image_env.vars }}


##
## finally for committing and pushing we switch back to docker host / ansible controller
##

  - name: post build steps
    block:

      ##- name: left container env, revert back to original python interpreter
      ##  set_fact:
      ##    ansible_python_interpreter: >-
      ##      {{ anspy_original }}


      ##- name: reset facts to docker host machine
      ##  ansible.builtin.setup:

      - set_fact:
          _build_img_tmpname: "{{ _bcon_name }}-tmpimg"

      - name: save build container to image  ==>>  {{ _cur_dockimg.fullname }}
        smabot.containers.docker_commit:
          container: "{{ _bcon_name }}" ## id or tag, mandatory
          image_name: "{{ _build_img_tmpname }}" ## image name, mandatory
          ##image_tag: ## optional, defaults to docker default (latest)

          ## if image already exists, it will not be overwritten unless 
          ## force is set, existing here means simply something with given 
          ## image name + tag exist already on docker node or is pullable
          force: True

          authors: "{{ _cur_dockimg.authors | default(omit, true) }}"

          ## TODO: complete keywords
          docker_keywords:
            ## 1:1 analogous to dockerfile statements with the same name, all optional
            CMD: "{{ _cur_dockimg.docker_cmd }}"
            ENTRYPOINT: "{{ _cur_dockimg.entrypoint }}"
            ENV: "{{ _cur_dockimg.environment.static | default(omit, True) }}"
            EXPOSE: "{{ _cur_dockimg.expose | default(omit, True) }}"
            LABEL: "{{ _cur_image_labels }}"
            USER: "{{ _cur_dockimg.docker_user.initial | default('root', True) }}"
            WORKDIR: "{{ _cur_dockimg.workdir | default(omit, True) }}"


      - name: remove build container for  ==>>  {{ _cur_dockimg.fullname }}
        community.docker.docker_container:
          name: "{{ _bcon_name }}"
          state: absent
        when: not (docker_build_keep_buildcon | default(False))


      - set_fact:
          _build_tags: []

        ##
        ## note: atm when handling a batch of multiple "variant" builds (autoversioning) only add custom fixed preset tags to "latest" version
        ## TODO: do we need the possibility here to finetune this more???
        ##
      - set_fact:
          _build_tags: "{{ _build_tags + _cur_dockimg.tags }}"
        when: _autovcfg_iter.latest

      - set_fact:
          _build_tags: "{{ _autovcfg_iter.tags + _build_tags }}"
        when: _autovcfg_iter.tags | default(False, True)

      - name: >-
          no explicit tags for this build found, so build default 
          tag latest  ==>>  {{ _cur_dockimg.fullname }}
        set_fact:
          _build_tags: ['latest']
        when: not _build_tags


      - include_tasks: postbuild_tasks.yml
        loop: "{{ _build_tags }}"
        loop_control:
          loop_var: _btag_iter


      - set_fact:
          _cur_image_meta: >-
            {{ _cur_image_meta | combine({'builds': [_dbuild_meta]},
                recursive=True, list_merge='append')
            }}
        when: docker_build.meta.create

    delegate_to: localhost

##   - include_role: 
##       name: hashicorp_vault_sma_login
## 
##     ## TODO: use a lookup here instead
##   - block:
## 
##       - hashivault_read:
##           mount_point: secrets/kv2/sma/manual/default
##           secret: accounts/adservice/svc.integrity/pw
##           key: usr
##           version: 2
##         register: _dacc_usr
## 
##       - hashivault_read:
##           mount_point: secrets/kv2/sma/manual/default
##           secret: accounts/adservice/svc.integrity/pw
##           key: pw
##           version: 2
##         register: _dacc_pw
## 
##     environment:
##       VAULT_TOKEN: "{{ awxcred_hashivault_token }}"


##   - name: docker registry login
##     docker_login:
##       registry: "repositories.developer.sunnyportal.com:5000"
##       username: "{{ _dacc_usr.value }}"
##       password: "{{ _dacc_pw.value }}"
##       reauthorize: yes
## 
## ## TODO: for some reason this always fails with useless error message unknown:unknown
## ## TODO: maybe do this in the working jenkins context
## ##  - name: tag and push to registry  ==>>  {{ _cur_dockimg.fullname }}
## ##    docker_image:
## ##      name: "{{ _cur_dockimg.fullname }}"
## ##      repository: "repositories.developer.sunnyportal.com:5000/{{ _cur_dockimg.fullname }}"
## ##      ##tag: 7
## ##      force_tag: yes # might be necessary to overwrite existing images
## ##      push: yes
## ##      source: local
## 
## 
##   - name: docker registry logout
##     docker_login:
##       state: absent

